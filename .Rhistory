geom_line() +
xlim(0, 5) + ylim(0, 1.5) +
geom_line(mapping = aes(x = x, y = px2), color = "green") +
geom_line(mapping = aes(x = x, y = px3), color = "red") +
theme_classic()
ggplot(dat, aes(x = x, y = px1), color = "lightblue") +
geom_line(color = "blue") +
xlim(0, 5) + ylim(0, 1.5) +
geom_line(mapping = aes(x = x, y = px2), color = "green") +
geom_line(mapping = aes(x = x, y = px3), color = "red") +
theme_classic()
ggplot(dat, aes(x = x, y = px1)) +
geom_line(color = "blue") +
xlim(0, 5) + ylim(0, 1.5) +
geom_line(mapping = aes(x = x, y = px2), color = "green") +
geom_line(mapping = aes(x = x, y = px3), color = "red") +
theme_classic()
ggplot(dat, aes(x = x, y = px1)) +
geom_line(aes(color = "blue")) +
xlim(0, 5) + ylim(0, 1.5) +
geom_line(mapping = aes(x = x, y = px2, color = "green")) +
geom_line(mapping = aes(x = x, y = px3, color = "red")) +
theme_classic()
ggplot(dat, aes(x = x, y = px1)) +
geom_line(aes(color = "blue")) +
xlim(0, 5) + ylim(0, 1.5) +
geom_line(mapping = aes(x = x, y = px2, color = "green")) +
geom_line(mapping = aes(x = x, y = px3, color = "red")) +
theme_classic() +
scale_color_identity(guide = "legend")
ggplot(dat, aes(x = x, y = px1)) +
geom_line(aes(color = "blue")) +
xlim(0, 5) + ylim(0, 1.5) +
geom_line(mapping = aes(x = x, y = px2, color = "green")) +
geom_line(mapping = aes(x = x, y = px3, color = "red")) +
theme_classic() +
scale_color_identity(name = "Lambda",
breaks = c("blue", "green", "red"),
labels = c(expression(paste(plain(sin)*eta^2, "= 1")),
expression(paste(plain(sin)*eta^2, "= 0.5")),
expression(paste(plain(sin)*eta^2, "= 1.5"))),
guide = "legend")
ggplot(dat, aes(x = x, y = px1)) +
geom_line(aes(color = "blue")) +
xlim(0, 5) + ylim(0, 1.5) +
geom_line(mapping = aes(x = x, y = px2, color = "green")) +
geom_line(mapping = aes(x = x, y = px3, color = "red")) +
theme_classic() +
scale_color_identity(name = "Lambda",
breaks = c("blue", "green", "red"),
labels = c(expression(paste(lambda, "= 1")),
expression(paste(lambda, "= 0.5")),
expression(paste(lambda, "= 1.5"))),
guide = "legend")
ggplot(dat, aes(x = x, y = px1)) +
geom_line(aes(color = "blue")) +
xlim(0, 5) + ylim(0, 1.5) +
geom_line(mapping = aes(x = x, y = px2, color = "green")) +
geom_line(mapping = aes(x = x, y = px3, color = "red")) +
theme_classic() +
scale_color_identity(name = "Lambda",
breaks = c("blue", "green", "red"),
labels = c(expression(paste(lambda, "= 1.0")),
expression(paste(lambda, "= 0.5")),
expression(paste(lambda, "= 1.5"))),
guide = "legend")
ggplot(dat, aes(x = x, y = px1)) +
geom_line(aes(color = "blue")) +
xlim(0, 5) + ylim(0, 1.5) +
geom_line(mapping = aes(x = x, y = px2, color = "green")) +
geom_line(mapping = aes(x = x, y = px3, color = "red")) +
theme_classic() +
scale_color_identity(name = "Lambda",
breaks = c("blue", "green", "red"),
labels = c(expression(paste(lambda, " = 1.0")),
expression(paste(lambda, " = 0.5")),
expression(paste(lambda, " = 1.5"))),
guide = "legend")
ggplot(dat, aes(x = x, y = px1)) +
geom_line(aes(color = "blue")) +
xlim(0, 5) + ylim(0, 1.5) +
geom_line(mapping = aes(x = x, y = px2, color = "green")) +
geom_line(mapping = aes(x = x, y = px3, color = "red")) +
theme_classic() +
scale_color_identity(name = "Lambda",
breaks = c("blue", "green", "red"),
labels = c(expression(paste(lambda, " = 1.0")),
expression(paste(lambda, " = 0.5")),
expression(paste(lambda, " = 1.5"))),
guide = "legend") +
theme(legend.position = c(.9, .9))
ggplot(dat, aes(x = x, y = px1)) +
geom_line(aes(color = "blue")) +
xlim(0, 5) + ylim(0, 1.5) +
geom_line(mapping = aes(x = x, y = px2, color = "green")) +
geom_line(mapping = aes(x = x, y = px3, color = "red")) +
theme_classic() +
scale_color_identity(name = "Lambda",
breaks = c("blue", "green", "red"),
labels = c(expression(paste(lambda, " = 1.0")),
expression(paste(lambda, " = 0.5")),
expression(paste(lambda, " = 1.5"))),
guide = "legend") +
theme(legend.position = c(.8, .8))
View(dat)
#graph all three distributions in one graph
ggplot(dat, aes(x = x, y = px1)) +
geom_line(aes(color = "blue")) +
xlim(0, 5) + ylim(0, 1.5) +
geom_line(mapping = aes(x = x, y = px2, color = "green")) +
geom_line(mapping = aes(x = x, y = px3, color = "red")) +
xlab("x") + ylab("P(x)") +
theme_classic() +
scale_color_identity(name = "Lambda",
breaks = c("blue", "green", "red"),
labels = c(expression(paste(lambda, " = 1.0")),
expression(paste(lambda, " = 0.5")),
expression(paste(lambda, " = 1.5"))),
guide = "legend") +
theme(legend.position = c(.8, .8))
## Code for graphing the cdf
x2 <- seq(0, 5, length = 100)
#put my data in a datframe and distribute exponentially based on lambdas of 1, 0.5 and 1.5
dat <- data.frame(x = x2, cx1 = pexp(x2, rate = 1))
ggplot(dat, aes(x = x, y = px1)) +
geom_line()
ggplot(dat, aes(x = x, y = cx1)) +
geom_line()
ggplot(dat, aes(x = x, y = cx1)) +
geom_line() +
theme_classic()
## Code for graphing the cdf
x2 <- seq(0, 5, length = 100)
#put my data in a datframe and distribute exponentially based on lambdas of 1, 0.5 and 1.5
dat <- data.frame(x = x2, cx1 = pexp(x2, rate = 1), cx2 = pexp(x2, rate = 0.5), cx3 = pexp(x2, rate = 1.5))
ggplot(dat, aes(x = x2, y = cx1)) +
geom_line(aes(color = "blue")) +
xlim(0, 5) + ylim(0, 1.5) + #limit graph boundaries
geom_line(mapping = aes(x = x2, y = cx2, color = "green")) + #add the second
geom_line(mapping = aes(x = x2, y = cx3, color = "red")) + #and third lines
xlab("x") + ylab("P(x)") + #x and y labels
theme_classic() + #remove background noise
scale_color_identity(name = "Lambda", #identify the legend scale and labels
breaks = c("blue", "green", "red"),
labels = c(expression(paste(lambda, " = 1.0")),
expression(paste(lambda, " = 0.5")),
expression(paste(lambda, " = 1.5"))),
guide = "legend") +
theme(legend.position = c(.8, .8)) #position the legend
ggplot(dat, aes(x = x2, y = cx1)) +
geom_line(aes(color = "blue")) +
xlim(0, 5) +  #limit graph boundaries
geom_line(mapping = aes(x = x2, y = cx2, color = "green")) + #add the second
geom_line(mapping = aes(x = x2, y = cx3, color = "red")) + #and third lines
xlab("x") + ylab("P(x)") + #x and y labels
theme_classic() + #remove background noise
scale_color_identity(name = "Lambda", #identify the legend scale and labels
breaks = c("blue", "green", "red"),
labels = c(expression(paste(lambda, " = 1.0")),
expression(paste(lambda, " = 0.5")),
expression(paste(lambda, " = 1.5"))),
guide = "legend") +
theme(legend.position = c(.8, .8)) #position the legend
#graph the cdfs
ggplot(dat, aes(x = x2, y = cx1)) +
geom_line(aes(color = "blue")) +
xlim(0, 5) +  #limit graph boundaries
geom_line(mapping = aes(x = x2, y = cx2, color = "green")) + #add the second
geom_line(mapping = aes(x = x2, y = cx3, color = "red")) + #and third lines
xlab("x") + ylab("P(x)") + #x and y labels
theme_classic() + #remove background noise
scale_color_identity(name = "Lambda", #identify the legend scale and labels
breaks = c("blue", "green", "red"),
labels = c(expression(paste(lambda, " = 1.0")),
expression(paste(lambda, " = 0.5")),
expression(paste(lambda, " = 1.5"))),
guide = "legend") +
theme(legend.position = c(.8, .2)) #position the legend
N <- 100
y_exp <- rexp(N, rate = .2)
hist(y_rexp, breaks = 50, main = "")
## Example code for our n = 100 and mu = 5 example
set.seed(341) #to make sure our code can be duplicated the same
N <- 100
y_rexp <- rexp(N, rate = .2)
hist(y_rexp, breaks = 50, main = "")
## Example code for our n = 100 and mu = 5 example
set.seed(341) #to make sure our code can be duplicated the same
N <- 100
x_dexp <- seq(1, 10, .1)
y_dexp <- dexp(x_dexp, rate = .2)
plot(y_dexp)
y_rexp <- rexp(N, rate = .2)
hist(y_rexp, breaks = 50, main = "")
plot(y_dexp)
## Example code for our n = 100 and mu = 5 example
set.seed(341) #to make sure our code can be duplicated the same
N <- 100
x_dexp <- seq(1, 100, 1)
y_dexp <- dexp(x_dexp, rate = .2)
plot(y_dexp)
y_rexp <- rexp(N, rate = .2)
hist(y_rexp, breaks = 50, main = "")
## Example code for our n = 100 and mu = 5 example
set.seed(341) #to make sure our code can be duplicated the same
N <- 100
x_dexp <- seq(1, 100, 1)
y_dexp <- dexp(x_dexp, rate = .2)
plot(y_dexp)
y_rexp <- rexp(N, rate = .2)
hist(y_rexp, breaks = 50, main = "")
abline(y_dexp)
## Example code for our n = 100 and mu = 5 example
set.seed(341) #to make sure our code can be duplicated the same
sim < - rexp(100) + rnorm(100,0,.01)
hist(sim, freq=FALSE)
curve(dexp(x, rate=.2, log=FALSE), add = TRUE)
## Example code for our n = 100 and mu = 5 example
set.seed(341) #to make sure our code can be duplicated the same
sim < - rexp(100) + rnorm(100,0,.01)
## Example code for our n = 100 and mu = 5 example
set.seed(341) #to make sure our code can be duplicated the same
sim <- rexp(100) + rnorm(100,0,.01)
hist(sim, freq=FALSE)
curve(dexp(x, rate=.2, log=FALSE), add = TRUE)
curve(dexp(x, rate=1, log=FALSE), add = TRUE)
## Example code for our n = 100 and mu = 5 example
set.seed(341) #to make sure our code can be duplicated the same
sim <- rexp(100) + rnorm(100,0,.01)
hist(sim, freq=FALSE)
curve(dexp(x, rate=1, log=FALSE), add = TRUE)
## Example code for our n = 100 and mu = 5 example
set.seed(3412) #to make sure our code can be duplicated the same
sim <- rexp(100) + rnorm(100,0,.01)
hist(sim, freq=FALSE)
curve(dexp(x, rate=1, log=FALSE), add = TRUE)
hist(y_rexp, breaks = 20, main = "")
## Example code for our n = 100 and mu = 5 example
set.seed(341) #to make sure our code can be duplicated the same
N <- 100
y_rexp <- rexp(N, rate = .2)
hist(y_rexp, breaks = 20, main = "")
## Example code for our n = 100 and mu = 5 example
set.seed(341) #to make sure our code can be duplicated the same
N <- 100
lambda <- .2
y_rexp <- rexp(N, rate = lambda)
hist(y_rexp, breaks = N/5, main = "")
curve(dexp(x, rate=lambda), add=TRUE)
## Example code for our n = 100 and mu = 5 example
set.seed(341) #to make sure our code can be duplicated the same
N <- 100
lambda <- .2
y_rexp <- rexp(N, rate = lambda)
hist(y_rexp, breaks = N/5, main = "")
curve(dexp(x, rate=lambda, log = FALSE), add=TRUE)
hist(y_rexp, breaks = N/5, main = "", freq = FALSE)
curve(dexp(x, rate=lambda, log=FALSE), add=TRUE)
curve(dexp(x, rate=lambda), add=TRUE)
## Example code for our n = 100 and mu = 5 example
set.seed(341) #to make sure our code can be duplicated the same
N <- 100
lambda <- .2
y_rexp <- rexp(N, rate = lambda)
hist(y_rexp, breaks = N/5, main = "", freq = FALSE)
curve(dexp(x, rate=lambda), add=TRUE)
## Example code for our n = 100 and mu = 5 example
set.seed(34) #to make sure our code can be duplicated the same
N <- 100
lambda <- .2
y_rexp <- rexp(N, rate = lambda)
hist(y_rexp, breaks = N/5, main = "", freq = FALSE)
curve(dexp(x, rate=lambda), add=TRUE)
## Example code for our n = 100 and mu = 5 example
set.seed(341) #to make sure our code can be duplicated the same
N <- 100
lambda <- .2
y_rexp <- rexp(N, rate = lambda)
hist(y_rexp, breaks = N/5, main = "", freq = FALSE)
curve(dexp(x, rate=lambda), add=TRUE)
curve(dexp(x, rate=lambda), add=TRUE, color = "red") #add the exponential distribution curve
curve(dexp(x, rate=lambda), add=TRUE, co = "red") #add the exponential distribution curve
curve(dexp(x, rate=lambda), add=TRUE, col = "red") #add the exponential distribution curve
curve(dexp(x, rate=lambda), add=TRUE, color = "red") #add the exponential distribution curve
curve(dexp(x, rate=lambda), add=TRUE, col = "red") #add the exponential distribution curve
curve(dexp(x, rate=lambda), add=TRUE, fill = "red") #add the exponential distribution curve
## Example code for our n = 100 and mu = 5 example
set.seed(341) #to make sure our code can be duplicated the same
N <- 100 #our sample had 100 customers
lambda <- .2 #our rate was every 5 minutes, or 1/5 of a customer every minute (0.2)
y_rexp <- rexp(N, rate = lambda) #we create our data using n and lambda
hist(y_rexp, breaks = N/5, main = "", freq = FALSE) #plot the histogram by proportion
curve(dexp(x, rate=lambda), add=TRUE, col = "red") #add the exponential distribution curve
## Example code for our n = 100 and mu = 5 example
set.seed(341) #to make sure our code can be duplicated the same
N <- 100 #our sample had 100 customers
lambda <- .2 #our rate was every 5 minutes, or 1/5 of a customer every minute (0.2)
y_rexp <- rexp(N, rate = lambda) #we create our data using n and lambda
hist(y_rexp, breaks = N/5, main = "", freq = FALSE, xlab="# of minutes", ylab="Proportion") #plot the histogram by proportion
curve(dexp(x, rate=lambda), add=TRUE, col = "red") #add the exponential distribution curve and make it red
hist(y_rexp, breaks = N/5, freq = FALSE, xlab="# of minutes", ylab="Proportion") #plot the histogram by proportion
hist(y_rexp, breaks = N/5, main="Histogram of minutes to purchase", freq = FALSE, xlab="# of minutes", ylab="Proportion") #plot the histogram by proportion
## Example code for our n = 100 and mu = 5 example
set.seed(341) #to make sure our code can be duplicated the same
N <- 100 #our sample had 100 customers
lambda <- .2 #our rate was every 5 minutes, or 1/5 of a customer every minute (0.2)
y_rexp <- rexp(N, rate = lambda) #we create our data using n and lambda
hist(y_rexp, breaks = N/5, main="Histogram of minutes to purchase", freq = FALSE, xlab="# of minutes", ylab="Proportion") #plot the histogram by proportion
curve(dexp(x, rate=lambda), add=TRUE, col = "red") #add the exponential distribution curve and make it red
## Code for displaying pdfs of exponential distributions with different values of lambda
#make my data
x <- seq(0, 5, length = 100)
#put my data in a dataframe and distribute exponentially based on lambdas of 1, 0.5 and 1.5.
#Using dexp to get the pdf
dat <- data.frame(x = x, px1 = dexp(x, rate = 1), px2 = dexp(x, rate = 0.5), px3 = dexp(x, rate = 1.5))
#need ggplot2 to make my pretty graph
library(ggplot2)
#graph all three distributions in one graph
ggplot(dat, aes(x = x, y = px1)) +
geom_line(aes(color = "blue")) +
xlim(0, 5) + ylim(0, 1.5) + #limit graph boundaries
geom_line(mapping = aes(x = x, y = px2, color = "green")) + #add the second
geom_line(mapping = aes(x = x, y = px3, color = "red")) + #and third lines
xlab("x") + ylab("P(x)") + #x and y labels
theme_classic() + #remove background noise
scale_color_identity(name = "Lambda", #identify the legend scale and labels
breaks = c("blue", "green", "red"),
labels = c(expression(paste(lambda, " = 1.0")),
expression(paste(lambda, " = 0.5")),
expression(paste(lambda, " = 1.5"))),
guide = "legend") +
theme(legend.position = c(.8, .8)) #position the legend
## Code for graphing the cdf
#create the data
x2 <- seq(0, 5, length = 100)
#put my data in a dataframe and distribute exponentially based on lambdas of 1, 0.5 and 1.5.
#Using pexp to get the cdf this time.
dat <- data.frame(x = x2, cx1 = pexp(x2, rate = 1), cx2 = pexp(x2, rate = 0.5), cx3 = pexp(x2, rate = 1.5))
#graph the cdfs
ggplot(dat, aes(x = x2, y = cx1)) +
geom_line(aes(color = "blue")) +
xlim(0, 5) +  #limit graph boundaries
geom_line(mapping = aes(x = x2, y = cx2, color = "green")) + #add the second
geom_line(mapping = aes(x = x2, y = cx3, color = "red")) + #and third lines
xlab("x") + ylab("P(x)") + #x and y labels
theme_classic() + #remove background noise
scale_color_identity(name = "Lambda", #identify the legend scale and labels
breaks = c("blue", "green", "red"),
labels = c(expression(paste(lambda, " = 1.0")),
expression(paste(lambda, " = 0.5")),
expression(paste(lambda, " = 1.5"))),
guide = "legend") +
theme(legend.position = c(.8, .2)) #position the legend
## Example code for our n = 100 and mu = 5 example
set.seed(341) #to make sure our code can be duplicated the same
N <- 100 #our sample had 100 customers
lambda <- .2 #our rate was every 5 minutes, or 1/5 of a customer every minute (0.2)
y_rexp <- rexp(N, rate = lambda) #we create our data using n and lambda
hist(y_rexp, breaks = N/5,
main="Histogram of minutes to purchase", freq = FALSE,
xlab="# of minutes",
ylab="Proportion") #plot the histogram by proportion with proper labels and proportions
curve(dexp(x, rate=lambda), add=TRUE, col = "red") #add the exponential distribution curve and make it red
hist(y_rexp, breaks = N/5,
main="Histogram of minutes to purchase", freq = FALSE,
xlab="# of minutes",
ylab="Proportion",
fill="white") #plot the histogram by proportion with proper labels and proportions
hist(y_rexp, breaks = N/5,
main="Histogram of minutes to purchase", freq = FALSE,
xlab="# of minutes",
ylab="Proportion",
color="white") #plot the histogram by proportion with proper labels and proportions
hist(y_rexp, breaks = N/5,
main="Histogram of minutes to purchase", freq = FALSE,
xlab="# of minutes",
ylab="Proportion",
fill="white") #plot the histogram by proportion with proper labels and proportions
113+108+140+113+115+146+136+107+108+119+132+127+118+108+103+103+122+111
(1/((18/15^2)+(1/7.5^2))*((110/7.5^2)+(2129/15^2)))
(1/((18/15^2)+(1/7.5^2))
(1/((18/15^2)+(1/7.5^2)))
(1/((18/15^2)+(1/7.5^2)))
qnorm(.025, mean = 116.7727, sd = 10.22727)
qnorm(.975, mean = 116.7727, sd = 10.22727)
2129/18
118.2778+1.96*(15/sqrt(18))
118.2778-1.96*(15/sqrt(18))
library(tidyverse)
library(ggfortify)
library(car)
library(corrplot)
setwd("~/Downloads")
library(readxl)
teams <- read.xlsx("NbaSalary.xlsx", sheet= "18-19 Team")
teams <- read_excel("NbaSalary.xlsx", sheet= "18-19 Team")
View(teams)
salaries <- read_excel("NbaSalary.xlsx", sheet = "18-19 Salary")
View(salaries)
data <- read_excel("NbaSalary.xlsx", sheet = "Combined")
View(data)
comb <- read_excel("NbaSalary.xlsx", sheet = "Combined")
summary(comb)
comb <- comb[1]
View(comb)
rm(list = ls())
comb[1]
setwd("~/Downloads") #or wherever you have the file
#Download all the data from the excel sheet
teams <- read_excel("NbaSalary.xlsx", sheet = "18-19 Team")
salaries <- read_excel("NbaSalary.xlsx", sheet = "18-19 Salary")
comb <- read_excel("NbaSalary.xlsx", sheet = "Combined")
comb[1]
comb <- comb[c(1:5, 36:40)]
View(comb)
#Download all the data from the excel sheet
#teams <- read_excel("NbaSalary.xlsx", sheet = "18-19 Team")
#salaries <- read_excel("NbaSalary.xlsx", sheet = "18-19 Salary")
comb <- read_excel("NbaSalary.xlsx", sheet = "Combined")
comb <- comb[c(1:6, 36:40)]
summary(comb)
summary(comb)
getwd() #or wherever you have the file
getwd() #or wherever you have the file
setwd("nbasalary") #or wherever you have the file
setwd("~/Desktop/Stats/IS 590R/nbasalary") #or wherever you have the file
getwd()
library(tidyverse) #for graphs
library(ggfortify) #for some fancy graph stuff
library(car) #for analysis
library(readxl) #to read specific sheets
library(corrplot) #for correlation stuff
setwd("~/Desktop/Stats/IS 590R/nbasalary") #or wherever you have the file
#Download all the data from the excel sheet
#teams <- read_excel("NbaSalary.xlsx", sheet = "18-19 Team")
#salaries <- read_excel("NbaSalary.xlsx", sheet = "18-19 Salary")
comb <- read_excel("NbaSalary.xlsx", sheet = "Combined")
comb <- comb[c(1:6, 36:40)] #taking out data I'm not using. First 5 columns are maybe numbers we'll try to predict,
summary(comb)
View(comb)
setwd("~/Desktop/Stats/Past/STAT_330")
# load packages here
library(tidyverse)
library(ggfortify)
library(car)
library(corrplot)
setwd("~/Desktop/Stats/Past/STAT_330")
# your code here
bodyfat <- read.delim(file = "BodyFat.txt", sep = " ")
summary(bodyfat)
# your code here
plot(bodyfat, pch = 19)
View(bodyfat)
View(comb)
#next 5 columns are the salary stuff that could be predictive.
practice <- comb[c(3,9:11)]
View(practice)
#next 5 columns are the salary stuff that could be predictive.
practice <- comb[c(3,7:11)]
summary(practice)
plot(practice, pch = 15)
plot(practice, pch = 19)
plot(practice, pch = 12)
plot(practice, pch = 11)
plot(practice, pch = 1)
plot(practice, pch = 2)
plot(practice, pch = 3)
plot(practice, pch = 4)
plot(practice, pch = 5)
plot(practice, pch = 6)
plot(practice, pch = 7)
plot(practice, pch = 8)
plot(practice, pch = 9)
plot(practice, pch = 10)
plot(practice, pch = 11)
plot(practice, pch = 12)
plot(practice, pch = 13)
plot(practice, pch = 14)
plot(practice, pch = 15)
plot(practice, pch = 16)
plot(practice, pch = 17)
plot(practice, pch = 18)
plot(practice, pch = 19)
plot(practice, pch = 16)
round(cor(practice), 2)
corrplot(cor(practice), type = "upper")
practice.lm <- lm(NRtg ~ ., data = practice)
summary(practice.lm)
practice$residuals <- practice.lm$residuals
practice$fitted.values <- practice.lm$fitted.values
library(tidyverse) #for graphs
library(ggfortify) #for some fancy graph stuff
library(car) #for analysis
library(readxl) #to read specific sheets
library(corrplot) #for correlation stuff
setwd("~/Desktop/Stats/IS 590R/nbasalary") #or wherever you have the file
#Download all the data from the excel sheet
#teams <- read_excel("NbaSalary.xlsx", sheet = "18-19 Team")
#salaries <- read_excel("NbaSalary.xlsx", sheet = "18-19 Salary")
comb <- read_excel("NbaSalary.xlsx", sheet = "Combined")
comb <- comb[c(1:6, 36:40)] #taking out data I'm not using. First 5 columns are maybe numbers we'll try to predict,
#next 5 columns are the salary stuff that could be predictive.
practice <- comb[c(3,7:11)]
summary(practice)
plot(practice, pch = 16)
round(cor(practice), 2)
corrplot(cor(practice), type = "upper")
#first model, haven't checked assumptions on it yet.
practice.lm <- lm(NRtg ~ ., data = practice)
summary(practice.lm)
practice$residuals <- practice.lm$residuals
practice$fitted.values <- practice.lm$fitted.values
